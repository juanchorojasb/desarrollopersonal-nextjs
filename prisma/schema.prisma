// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 👤 MODELO DE USUARIO (Integrado con Clerk)
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  subscriptions    Subscription[]
  qrPayments       QRPayment[]
  enrollments      Enrollment[]
  lessonProgress   LessonProgress[]

  @@map("users")
}

// 💳 MODELO DE PLANES
model Plan {
  id          String @id @default(cuid())
  name        String
  description String? @db.Text
  price       Int    // Precio en centavos (25000 = $25.000)
  currency    String @default("COP")
  
  // Características del plan
  billingCycle     String  // "MONTHLY", "QUARTERLY", "YEARLY"
  features         Json?   // Array de características
  maxCourses       Int?    // Límite de cursos
  hasLiveSupport   Boolean @default(false)
  hasGroupCoaching Boolean @default(false)
  hasPrioritySupport Boolean @default(false)
  
  // Metadata
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  subscriptions Subscription[]

  @@map("plans")
}

// 📱 MODELO DE SUSCRIPCIONES
model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  
  // Estado y facturación
  status       String  // "PENDING", "ACTIVE", "CANCELLED", "EXPIRED"
  billingCycle String  // "MONTHLY", "QUARTERLY", "YEARLY"
  priceAmount  Int     // Precio pagado
  currency     String  @default("COP")
  
  // Períodos de facturación (OPCIONALES PARA EVITAR EL ERROR)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  
  // Metadata
  isActive    Boolean  @default(true)
  cancelledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// 💰 MODELO DE PAGOS QR
model QRPayment {
  id          String   @id @default(cuid())
  userId      String
  planId      String
  
  // Información del pago
  amount      Int      // Monto en centavos
  currency    String   @default("COP")
  status      String   // "PENDING", "APPROVED", "REJECTED"
  
  // Datos bancarios usados
  bankName    String?  // "Bancolombia", "Davivienda"
  accountInfo String?  // Información de cuenta
  
  // Comprobante
  receiptUrl    String?  // URL del comprobante subido
  receiptFileName String?
  
  // Datos de aprobación
  approvedBy    String?   // ID del admin que aprobó
  approvedAt    DateTime?
  rejectedAt    DateTime?
  rejectionReason String? @db.Text
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("qr_payments")
}

// 📚 MODELO DE CURSOS
model Course {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  imageUrl    String?
  
  // Configuración del curso
  isActive    Boolean @default(true)
  isFree      Boolean @default(false)
  sortOrder   Int     @default(0)
  duration    Int?    // Duración estimada en minutos
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  modules     Module[]
  enrollments Enrollment[]

  @@map("courses")
}

// 📖 MODELO DE MÓDULOS
model Module {
  id        String  @id @default(cuid())
  courseId  String
  title     String
  description String? @db.Text
  
  // Configuración
  sortOrder Int     @default(0)
  isActive  Boolean @default(true)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

// 🎥 MODELO DE LECCIONES
model Lesson {
  id       String  @id @default(cuid())
  moduleId String
  title    String
  content  String? @db.Text // Contenido de texto
  
  // Video
  videoUrl      String? // URL del video en Bunny.net
  videoDuration Int?    // Duración en segundos
  thumbnailUrl  String?
  
  // Configuración
  sortOrder Int     @default(0)
  isActive  Boolean @default(true)
  isFree    Boolean @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  module   Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@map("lessons")
}

// 📝 MODELO DE INSCRIPCIONES
model Enrollment {
  id       String @id @default(cuid())
  userId   String
  courseId String
  
  // Estado
  status      String   @default("ACTIVE") // "ACTIVE", "COMPLETED", "CANCELLED"
  progress    Float    @default(0) // Porcentaje de progreso (0-100)
  completedAt DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Índice único para evitar inscripciones duplicadas
  @@unique([userId, courseId])
  @@map("enrollments")
}

// 📊 MODELO DE PROGRESO DE LECCIONES
model LessonProgress {
  id       String @id @default(cuid())
  userId   String
  lessonId String
  
  // Progreso
  completed    Boolean   @default(false)
  watchTime    Int       @default(0) // Tiempo visto en segundos
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  
  // Metadata
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Índice único para evitar duplicados
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// 🏆 MODELO DE CERTIFICADOS (OPCIONAL)
model Certificate {
  id       String @id @default(cuid())
  userId   String
  courseId String
  
  // Información del certificado
  certificateNumber String  @unique
  issuedAt         DateTime @default(now())
  expiresAt        DateTime?
  
  // URL del certificado generado
  certificateUrl String?
  
  // Metadata
  createdAt DateTime @default(now())

  @@map("certificates")
}

// 💬 MODELO DE COMENTARIOS/RESEÑAS (OPCIONAL)
model Review {
  id       String @id @default(cuid())
  userId   String
  courseId String
  
  // Reseña
  rating  Int     // 1-5 estrellas
  comment String? @db.Text
  
  // Estado
  isApproved Boolean @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
