generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  clerkId               String                 @unique
  email                 String                 @unique
  firstName             String?
  lastName              String?
  imageUrl              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  enrollments           Enrollment[]
  lessonProgress        LessonProgress[]
  paymentTransactions   PaymentTransaction[]
  qrPayments            QRPayment[]
  subscriptions         Subscription[]
  workshopRegistrations WorkshopRegistration[]

  @@map("users")
}

model Plan {
  id                 String         @id @default(cuid())
  name               String
  description        String?        @db.Text
  price              Int
  currency           String         @default("COP")
  billingCycle       String
  features           Json?
  maxCourses         Int?
  hasLiveSupport     Boolean        @default(false)
  hasGroupCoaching   Boolean        @default(false)
  hasPrioritySupport Boolean        @default(false)
  isActive           Boolean        @default(true)
  sortOrder          Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  subscriptions      Subscription[]

  @@map("plans")
}

model Subscription {
  id                  String               @id @default(cuid())
  userId              String
  planId              String
  status              String
  billingCycle        String
  priceAmount         Int
  currency            String               @default("COP")
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  isActive            Boolean              @default(true)
  cancelledAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  paymentTransactions PaymentTransaction[]
  plan                Plan                 @relation(fields: [planId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([planId], map: "subscriptions_planId_fkey")
  @@index([userId], map: "subscriptions_userId_fkey")
  @@map("subscriptions")
}

model PaymentTransaction {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  referenceCode     String        @unique
  transactionId     String?
  amount            Int
  currency          String
  country           String
  status            String
  paymentMethod     String?
  payuOrderId       String?
  payuTransactionId String?
  signature         String?
  description       String?       @db.Text
  extra1            String?
  extra2            String?
  extra3            String?
  responseCode      String?
  responseMessage   String?
  processedAt       DateTime?
  confirmedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([subscriptionId], map: "payment_transactions_subscriptionId_fkey")
  @@index([userId], map: "payment_transactions_userId_fkey")
  @@map("payment_transactions")
}

model QRPayment {
  id              String    @id @default(cuid())
  userId          String
  planId          String
  amount          Int
  currency        String    @default("COP")
  status          String
  bankName        String?
  accountInfo     String?
  receiptUrl      String?
  receiptFileName String?
  approvedBy      String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "qr_payments_userId_fkey")
  @@map("qr_payments")
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  imageUrl    String?
  isActive    Boolean      @default(true)
  isFree      Boolean      @default(false)
  sortOrder   Int          @default(0)
  duration    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  slug        String?      @unique
  enrollments Enrollment[]
  modules     Module[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?  @db.Text
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "modules_courseId_fkey")
  @@map("modules")
}

model Lesson {
  id            String           @id @default(cuid())
  moduleId      String
  title         String
  content       String?          @db.Text
  videoUrl      String?
  videoDuration Int?
  thumbnailUrl  String?
  sortOrder     Int              @default(0)
  isActive      Boolean          @default(true)
  isFree        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  videoId       String?
  progress      LessonProgress[]
  module        Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId], map: "lessons_moduleId_fkey")
  @@map("lessons")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  status      String    @default("ACTIVE")
  progress    Float     @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enrolledAt  DateTime  @default(now())
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId], map: "enrollments_courseId_fkey")
  @@map("enrollments")
}

model LessonProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  watchTime   Int       @default(0)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt
  completed   Boolean   @default(false)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([lessonId], map: "lesson_progress_lessonId_fkey")
  @@map("lesson_progress")
}

model LiveWorkshop {
  id            String                 @id @default(cuid())
  title         String
  description   String?                @db.Text
  scheduledAt   DateTime
  duration      Int
  maxStudents   Int                    @default(50)
  status        String                 @default("SCHEDULED")
  meetingUrl    String?
  requiredPlan  String                 @default("PREMIUM")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  registrations WorkshopRegistration[]

  @@map("live_workshops")
}

model WorkshopRegistration {
  id           String       @id @default(cuid())
  userId       String
  workshopId   String
  status       String       @default("REGISTERED")
  registeredAt DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  workshop     LiveWorkshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)

  @@unique([userId, workshopId])
  @@index([workshopId], map: "workshop_registrations_workshopId_fkey")
  @@map("workshop_registrations")
}

model Certificate {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  certificateNumber String    @unique
  issuedAt          DateTime  @default(now())
  expiresAt         DateTime?
  certificateUrl    String?
  createdAt         DateTime  @default(now())

  @@map("certificates")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  rating     Int
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}
