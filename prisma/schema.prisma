// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  
  // Campos adicionales
  bio       String?  @db.Text
  phone     String?
  birthDate DateTime?
  gender    String?
  
  // Suscripción
  subscriptionStatus String @default("free") // free, basic, premium, vip
  subscriptionExpiry DateTime?
  
  // Progreso
  totalXP       Int @default(0)
  currentLevel  Int @default(1)
  streakDays    Int @default(0)
  lastActivity  DateTime?
  
  // Relaciones
  enrollments   Enrollment[]
  lessonProgress LessonProgress[]
  notes         Note[]
  certificates  Certificate[]
  achievements  UserAchievement[]
  forumPosts    ForumPost[]
  forumReplies  ForumReply[]
  forumReactions ForumReaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Course {
  id          String @id @default(cuid())
  title       String
  description String @db.Text
  shortDesc   String?
  
  // Media
  thumbnail   String?
  trailerVideo String?
  
  // Configuración
  level       String @default("beginner") // beginner, intermediate, advanced
  category    String
  tags        String? // JSON array as string
  
  // Pricing
  price       Float @default(0)
  currency    String @default("USD")
  
  // Estado
  status      String @default("draft") // draft, published, archived
  featured    Boolean @default(false)
  
  // Estimaciones
  duration    Int? // en minutos
  studentsCount Int @default(0)
  
  // Instructor
  instructorId String?
  instructor   String? // Nombre del instructor
  
  // Orden y organización
  position    Int @default(0)
  
  // Relaciones
  modules     Module[]
  enrollments Enrollment[]
  reviews     Review[]
  certificates Certificate[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model Module {
  id          String @id @default(cuid())
  title       String
  description String? @db.Text
  
  // Orden
  position    Int
  
  // Configuración
  isRequired  Boolean @default(true)
  duration    Int? // en minutos
  
  // Relaciones
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modules")
}

model Lesson {
  id          String @id @default(cuid())
  title       String
  description String? @db.Text
  content     String? @db.Text // Contenido adicional o transcripción
  
  // Orden
  position    Int
  
  // Tipo de lección
  type        String @default("video") // video, text, quiz, assignment
  
  // Video (Bunny.net)
  videoUrl    String?
  videoId     String? // ID del video en Bunny.net
  videoDuration Int? // en segundos
  
  // Configuración
  isPreview   Boolean @default(false) // Gratis para preview
  isRequired  Boolean @default(true)
  minWatchTime Int @default(80) // % mínimo para marcar como visto
  
  // Recursos
  resources   String? // JSON array de recursos descargables
  
  // Relaciones
  moduleId    String
  module      Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  notes       Note[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lessons")
}

model Enrollment {
  id        String @id @default(cuid())
  
  // Relaciones
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Estado
  status    String @default("active") // active, completed, paused, expired
  progress  Float @default(0) // 0-100
  
  // Fechas importantes
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  expiresAt   DateTime?
  
  // Progreso
  lastAccessedAt DateTime?
  totalWatchTime Int @default(0) // en segundos
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id        String @id @default(cuid())
  
  // Relaciones
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  // Progreso
  isCompleted Boolean @default(false)
  watchTime   Int @default(0) // en segundos
  watchPercentage Float @default(0) // 0-100
  
  // Fechas
  startedAt   DateTime @default(now())
  completedAt DateTime?
  lastWatchedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Note {
  id        String @id @default(cuid())
  content   String @db.Text
  
  // Timestamp en el video (si aplica)
  timestamp Int? // en segundos
  
  // Relaciones
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

model Certificate {
  id        String @id @default(cuid())
  
  // Información del certificado
  certificateNumber String @unique
  title       String
  description String?
  
  // Relaciones
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Fechas
  issuedAt  DateTime @default(now())
  expiresAt DateTime?
  
  // URL del certificado generado
  certificateUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certificates")
}

model Review {
  id        String @id @default(cuid())
  rating    Int // 1-5 estrellas
  comment   String? @db.Text
  
  // Relaciones
  userId    String
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Estado
  isVerified Boolean @default(false)
  isPublic   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("reviews")
}

// Para sistema de gamificación (preparación)
model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String?
  
  // Tipo y criterios
  type        String // course_completion, streak, level_up, etc.
  criteria    String @db.Text // JSON con criterios
  
  // Recompensas
  xpReward    Int @default(0)
  badgeUrl    String?
  
  // Estado
  isActive    Boolean @default(true)
  
  // Relaciones
  userAchievements UserAchievement[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model UserAchievement {
  id            String @id @default(cuid())
  
  // Relaciones
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // Fecha de desbloqueo
  unlockedAt    DateTime @default(now())
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Modelos para el sistema de Comunidad/Foros
model ForumCategory {
  id          String @id @default(cuid())
  name        String
  description String? @db.Text
  slug        String @unique
  
  // Configuración
  color       String @default("#6366f1") // Color hex para la categoría
  icon        String? // Icono de Lucide React
  position    Int @default(0) // Orden de visualización
  
  // Estado
  isActive    Boolean @default(true)
  
  // Estadísticas
  postsCount  Int @default(0)
  lastPostAt  DateTime?
  
  // Relaciones
  posts       ForumPost[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("forum_categories")
}

model ForumPost {
  id          String @id @default(cuid())
  title       String
  content     String @db.Text
  slug        String
  
  // Relaciones
  authorId    String
  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId  String
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Estado
  isLocked    Boolean @default(false)
  isPinned    Boolean @default(false)
  isDeleted   Boolean @default(false)
  
  // Estadísticas
  viewsCount  Int @default(0)
  repliesCount Int @default(0)
  reactionsCount Int @default(0)
  
  // Fechas
  lastActivityAt DateTime @default(now())
  
  // Relaciones
  replies     ForumReply[]
  reactions   ForumReaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, slug])
  @@map("forum_posts")
}

model ForumReply {
  id        String @id @default(cuid())
  content   String @db.Text
  
  // Relaciones
  authorId  String
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String? // Para respuestas anidadas
  parent    ForumReply? @relation("ReplyToReply", fields: [parentId], references: [id])
  children  ForumReply[] @relation("ReplyToReply")
  
  // Estado
  isDeleted Boolean @default(false)
  
  // Estadísticas
  reactionsCount Int @default(0)
  
  // Relaciones
  reactions ForumReaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("forum_replies")
}

model ForumReaction {
  id        String @id @default(cuid())
  type      String // like, love, laugh, angry, etc.
  
  // Relaciones
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      ForumPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyId   String?
  reply     ForumReply? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  // Un usuario solo puede tener una reacción por post/reply
  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@map("forum_reactions")
}
